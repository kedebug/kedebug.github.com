<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kedebug]]></title>
  <link href="http://kedebug.com/atom.xml" rel="self"/>
  <link href="http://kedebug.com/"/>
  <updated>2015-07-05T20:05:23+08:00</updated>
  <id>http://kedebug.com/</id>
  <author>
    <name><![CDATA[kedebug]]></name>
    <email><![CDATA[kedebug0@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[怎么进入 BAT 的研发部门？]]></title>
    <link href="http://kedebug.com/blog/how-to-get-bat-offer/"/>
    <updated>2015-07-05T16:09:46+08:00</updated>
    <id>http://kedebug.com/blog/how-to-get-bat-offer</id>
    <content type="html"><![CDATA[<p>本人在 2015 年校招拿了 BAT 以及网易游戏等 offer，而且基本上都给了 Special，那就从我的角度来谈谈今年校招的体会。</p>

<!--more-->


<h2>1. 冰冻三尺非一日之寒</h2>

<p>综合身边一些拿到牛 offer 的同学，有个共同的特点就是：热爱这个行业。一个人在某个领域的成就是和自身在相关领域投入的时间和精力成正相关的。
付出了多少，虽然短期内收益微乎其微，如果经过数年的持续努力，便会由量变产生惊人的质变。比如多读书、多看代码，
一些计算机编程方面的经典书籍、GitHub 上面一些 star 越千的优秀开源项目，绝对值得多花时间研读。</p>

<p>我自身的情况大概是本科期间积累了 10 万行的代码量，有了这个基础硕士期间阅读一些代码呀，参与一些开源呀，就变得水到渠成。</p>

<h2>2. 主动培养自己的动手能力</h2>

<p>算法方面可以适当阅读算法导论、算法引论等书籍，多刷刷 leetcode, UVa 之类的培养出一定的解题思维。
虽然说一些算法在工程中很难用到，但是解决问题的思路以及不断去优化业务代码的想法，这些意识是可以通过算法训练得到的。</p>

<p>一般国内的互联网公司还是比较看重项目经验这块的，也就是你曾经做过什么，能突出个性的地方也在于此了。
这个方面可以从一些国外大学课程的大作业慢慢培养，如系统设计方面经典的有：</p>

<ul>
<li><a href="http://css.csail.mit.edu/6.824/2014/">MIT 6.824 Home Page: Spring 2014, Distributed Systems</a></li>
<li><a href="http://www.cs.cmu.edu/~dga/15-440/F12/">CMU 15-440, Fall 2012: Distributed Systems</a></li>
<li><a href="https://www.cs.cmu.edu/~410/">CMU 15-410, Operating System Design and Implementation</a></li>
</ul>


<p>如果跟着进度做完大作业的话，相信工程能力以及对系统设计的理解都会有很大的提高。</p>

<h2>3. 核心竞争力</h2>

<p>这个问题很大啦，那我也冒昧的说一下自己的理解。曾经很长一段时间内，我都不太清楚自己未来要干什么。
不过幸运的是，身边总有一些优秀的同学在激励自己前行（寝室 7 个人有 6 个拿到网易游戏 offer 我会乱说 :-p ），
而且在读研之初就得到 @靖难 学长的指点实在是人生之幸。那么问题来了，花了这么多时间去思考自己要干嘛就这么重要吗？我觉得非常重要。
当有了一个努力的方向，就会不断的去靠近，围绕着这个点不断探索，最终形成别人没办法轻易超越的壁垒。</p>

<h2>4. 关于面试</h2>

<p>面试在于突出自己的闪光点，体现自己的不可替代性。当你一步步走过上述几个阶段的时候，便会发现其实 BAT 的 offer 并没有想象中那么难，
难的是克服惰性不断的去超越自己。</p>

<p>找工作要从实习抓起。这并不是说实习一定会做一些多么核心的事情，而是一场面试几十分钟，面试官也无法清楚的判断你的实力，
需要从你过往在哪实习过以及拿到过哪些 offer 来对你进行综合判断。</p>

<p>GitHub，StackOverflow 等是加分点，参与过开源项目大加分。嘴里说出的话可能有可以虚假夸大的成分，
但是 GitHub 上面的代码提交记录以及代码质量不会骗人。我面试的过程中，就有几个面试官主动索要 GitHub 账号地址
 <a href="https://github.com/kedebug">kedebug (Wei Sun) · GitHub</a> 并且当场登陆查看相关项目情况，这都是能够提升自身形象大大利好的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[源码阅读计划]]></title>
    <link href="http://kedebug.com/blog/source-code-internal/"/>
    <updated>2015-06-21T17:38:14+08:00</updated>
    <id>http://kedebug.com/blog/source-code-internal</id>
    <content type="html"><![CDATA[<p><strong>写博客，实则是对自己不断学习的一种鞭策。</strong></p>

<!--more-->


<p>入职一个多月，工作上的事情基本上接手完毕，接下来应该会逐步过渡到工作、学习之间的一种平衡状态。</p>

<p>有一段时间没能坚持观看在 Youtube 上面订阅的 technical talks 了，感觉学习上略有松懈。之前选择在 Youtube
上面看一些原汁原味的技术分享视频，主要是为了提高听力。现在看来，这个目的算是完成，可以无压力观看 Google I/O
之类的视频。但学习目的也从「提高听力」转变到「追踪最新技术」，比如搜索 <code>golang google io</code>
会出现近 4 年在 Google I/O 的 <code>Golang</code> 视频，包括 Rob Pike 等一系列 <code>Golang</code> 核心开发者的演示视频，
可以直达语言精髓。不得不说，我自身便是这么学习 <code>Golang</code> 的，只花了三、四天时间，少走了很多弯路，
甚至还写了个有意思的解释器项目 <a href="https://github.com/kedebug/LispEx">LispEx</a>。</p>

<p>继续说到学习，在面试豌豆荚的时候，一个非常资深的架构师问我「接下来你还想做什么」？
错愕之余，我说「想用 <code>XX</code> 技术造一个 <code>XX</code> 轮子」，甚至把这个项目的最初想法说了一遍。对方的一句话点醒了我
「你应该把精力放在最重要的事情上，像这种已经非常成熟的技术，深入阅读相关源码可能会比 <code>reinvent the wheel</code> 效果好很多」。</p>

<p>于是便有了本文的源码阅读计划。个人认为，要成为一名优秀的后端工程师，除了通晓业务以及相关的技术，
更重要的是要有对网络、存储等基础领域不断精益求精的学习热情。学生生涯虽然阅读了不少像 <code>muduo, leveldb, cascadb, nessdb</code> 等，
但只能算是管中窥豹。工作之后，希望能够结合线上实际业务去理解一些开源项目的美妙之处。</p>

<p>下面几个项目算是经典中的经典，我会在接下来的时间里分享相关的源码阅读笔记，做到不断督促自己学习的目的。</p>

<ul>
<li>Nginx - A web server with a strong focus on high concurrency, performance and low memory usage.</li>
<li>RocksDB - A library that provides an embeddable, persistent key-value store for fast storage.</li>
<li>LMAX Disruptor - A high performance inter-thread messaging library.</li>
<li>TCMalloc - Considered to be more than twice as fast as glibc&rsquo;s ptmalloc for multithreaded programs.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015 校招总结]]></title>
    <link href="http://kedebug.com/blog/campus-offer-2015/"/>
    <updated>2015-06-13T18:44:05+08:00</updated>
    <id>http://kedebug.com/blog/campus-offer-2015</id>
    <content type="html"><![CDATA[<p>去年在知乎回答了 <a href="http://www.zhihu.com/question/25680951/answer/34499237">怎么进入 BAT 的研发部门</a>，结合自身感受说了一些学习上的体会。
当时校招虽然 BAT 的 offer 在手，但仍被 Yahoo! 远超预期的薪水以及自由开放的工作环境所吸引，
故考虑其作为职业生涯的起点。然而时过境迁，没想到未入职就经历了这次雅虎北研的解散，不得不再次面对找工作的窘境。</p>

<!--more-->


<h2>文章持续更新中&hellip;</h2>

<table>
<thead>
<tr>
<th> 公司 </th>
<th> <center>面试过程</center> </th>
<th style="text-align:center;"> 状态 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 阿里云 </td>
<td> 实习两轮技术面 + 转正交叉面试 </td>
<td style="text-align:center;"> <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>实习部门 <code>offer</code>，核心系统 - 数据库组，技术实力非常强大；</br> 承载整个集团 <code>90%</code> 的数据库流量，而且对外业务还在不断翻番；</br> 因为参与 <code>CascaDB</code> 以及 <code>nessDB</code> 的开源工作而结识了组里的一些大牛；</br> 这个 <code>offer</code> 算是水到渠成，由于是核心部门，在后续校招中也起了比较大的作用。</td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> 腾讯 </td>
<td> 两轮技术面 + <code>HR</code> 面 </td>
<td style="text-align:center;"> <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>游戏部门，北极光工作室；</br> 由于 2014 年腾讯、京东联姻，易迅部门整合，上海只招了二三十人；</br> 总体来说今年拿腾讯上海的 <code>offer</code> 压力还是比较大的。</td>
<td></td>
</tr>
<tr>
<td> 网易游戏 </td>
<td> 两轮技术面 </td>
<td style="text-align:center;">  <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>在线游戏事业部，两轮技术面总体难度不大；</br>上海区 <code>90%</code> 以上都是交大、复旦的同学，其中交大同学又占了<strong>绝大多数</strong>；</br>对交大 <code>CS/SE</code> 的同学来说，这个 <code>offer</code> 应该比较容易，难点在于谈个好价钱。</td>
<td></td>
</tr>
<tr>
<td> 雅虎北研 </td>
<td> 两轮技术面 + 技术经理面 </td>
<td style="text-align:center;"> <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>云计算组，非常赞的面试体验，<code>Strong hire</code>；</br>之前面试一些公司会遇到工作 2~3 年的面试官，面试非常机械死板，有种面不出来水平的感觉，而雅虎这次上海区校招的面试官都非常资深，基本上能把实力体现出来；</br>面试难度要比 BAT 高一个 <code>level</code>，最高档校招待遇，超一流的公司福利。</td>
<td></td>
</tr>
<tr>
<td> 七牛云存储 </td>
<td> <code>CEO</code> 面谈 </td>
<td style="text-align:center;"> <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>投了简历之后，七牛 <code>CEO</code> 老许专程跑到交大，在咖啡厅聊了半天；</br>诚惶诚恐，不错的薪水 + 可观的期权 + 非常赞的管理思维。</td>
<td></td>
</tr>
<tr>
<td> </td>
<td> <center><strong>以下为雅虎北研解散后的面试情况</strong></center> </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> 百度 </td>
<td> 校招三轮技术面 + 换部门两轮技术面 + 经理面 </td>
<td style="text-align:center;"> <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>网页搜索部，在线检索架构；</br>承载百度搜索每天数十亿的检索量，不可谓不核心；</br>校招顺利拿到 <code>offer</code> 之后，又因雅虎解散在北京连面三轮；</br> 经理人很好，<code>offer</code> 难度比一般部门要大。</td>
<td></td>
</tr>
<tr>
<td> 宜信大数据 </td>
<td> 一轮技术面 + 总监技术面 + 首席架构师面 </td>
<td style="text-align:center;"> <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>正常校招 4 轮面试，雅虎的同学过来只需要 2 轮，我个人面了 3 轮；</br>吴根清总监面完之后又根据自身实际背景推荐到洪强宁首席那边面了一轮；</br>互联网金融绝对的风口，豪华的团队阵容，大于 BAT 的面试难度；</br>京城知名 30 万俱乐部之一，但是 <code>HR</code> 对期权的回答模棱两可，最终没能考虑。</td>
<td></td>
</tr>
<tr>
<td> 微软 <code>STC</code> </td>
<td> <code>onsite</code> 三轮技术面 + <code>AA</code> 远程面试 </td>
<td style="text-align:center;"> <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>北京 <code>Bing</code>，<code>AA</code> 面试间隔了一周左右，中间已经收到满意 <code>offer</code>；</br>本想中途取消 <code>AA</code> 面试，但 <code>HR</code> 一番挽留之后坚持走完整个面试流程；</br>员工精神面貌相比国内互联网公司好要很多，环境很赞，但工作节奏偏慢；</br><code>Bing</code> 的技术积累还是非常深厚的，如果是第一份工作这个起点不比 <code>Google</code>、<code>Hulu</code> 差多少（国内），<code>transfer</code> 美帝工作的机会；</br>每轮面试都会有 2 道题，要求 <code>bug-free</code>，<code>leetcode</code> 中等难度；</br>校招面试还是中规中矩，但总体难度大于 BAT，待遇优于 BAT。</td>
<td></td>
</tr>
<tr>
<td> 亚马逊 </td>
<td> 经理面 + 两轮电话面 + <code>boss</code> 闲聊</td>
<td style="text-align:center;"> <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>经理首先电话简单聊了下，貌似挺满意，告诉我下面两轮面试不会太难；</br>电话面试会在远程白板写代码，会牵涉到一些接口设计题，难度不会太大；</br> 顺利拿到 <code>offer</code> 之后怕我不来， 经理的经理（印度人）又聊了一个小时；</br>要和三哥谈笑风生看来还有点差距，唯一的欣慰是被称赞口语还不错 ：）</br> 面试难度低于微软，做的基本上都是一些外围开发，待遇一般。</td>
<td></td>
</tr>
<tr>
<td> 豌豆荚 </td>
<td> 一轮电话面 + <code>onsite</code> 两轮技术面 + <code>leader</code> 面 + <code>CEO</code> 面 + <code>leader</code> 面 </td>
<td style="text-align:center;"> <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>为数不多 <code>CEO</code> 把关面试的公司，曾几何时大牛云集，现已风光不再；</br>办公条件非常赞，<strong>全天免费</strong>的牛奶、水果、饮料，咖啡厅级别的员工餐厅；</br> <code>HR</code> 对业务的专业程度令人钦佩，挽留过 6~7 次，沟通时间大于 5 小时；</br> <code>team</code> 任选，校招最高档待遇，若干期权，大于 <code>BAT</code> 的面试难度。</td>
<td></td>
</tr>
<tr>
<td> Linkedin China </td>
<td> 两轮技术面 + 技术副总裁面 + 总裁面 + 一轮硅谷总部电话面 </td>
<td style="text-align:center;"> <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>独立运营，当前非常赞的创业型团队，现在入伙算是初期核心员工；</br>面试有点中西结合：项目 + 算法，有 <code>Go</code> 语言经验会优先考虑；</br> 强大的领导团队，远超 <code>BAT</code> 的校招薪水，和总裁 <code>1 on 1</code> 的交流机会。</td>
<td></td>
</tr>
<tr>
<td> 360 </td>
<td> 两轮技术面 + <code>boss</code> 面 </td>
<td style="text-align:center;"> <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>搜索二级引擎组，技术比较强大，不少 <code>Google</code>、百度空降的大牛；</br>可能是因为雅虎标签缘故，也可能是面的不错，中间两轮面试面试官最终自爆系 <code>Googler</code>，<code>boss</code> 非常实在；</br>不错的 <code>offer</code>，做的事情也非常核心，但没有股票激励算是减分项。</td>
<td></td>
</tr>
<tr>
<td> 搜狐研发中心 </td>
<td> 两轮技术面 + <code>boss</code> 面 </td>
<td style="text-align:center;"> <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>很有趣的云存储团队，但缺少大牛做技术支撑，业务在集团内也缺少重视；</br>面试难度一般，校招最高档待遇，无奈不能给双外解决户口遂作罢。</td>
<td></td>
</tr>
<tr>
<td> FreeWheel </td>
<td> 三轮技术面 + 技术经理面 </td>
<td style="text-align:center;"> <code>rejected</code> </td>
</tr>
<tr>
<td></td>
<td>属于校招 30 万俱乐部的公司之一，北京的同学可能会了解的比较多；</br>前三轮都面的不错，涉及到业务相关的算法设计、多线程读写锁的设计、对 <code>leveldb</code> 源码理解等；</br>经理面出现失误，最终导致错失 <code>offer</code>，两方面：技术方面对 <code>leveldb</code> 使用的业务场景不熟悉；提问环节多次向经理发难，表示出为什么要选择你们的态度（当时 Linkedin <code>offer</code> 在手，并且他们的 <code>SVP</code> 跳槽 Linkedin），身为求职弱势一方，这些都是应该反思的；</br>面试强度较大，难度也和雅虎、微软等不相上下，transfer 美帝的工作机会。</td>
<td></td>
</tr>
<tr>
<td> 技德科技 </td>
<td> 两轮技术面 + <code>co-founder</code> 面 </td>
<td style="text-align:center;"> <code>offer</code> </td>
</tr>
<tr>
<td></td>
<td>非常赞的 <code>Google</code> 系创业公司，很有硅谷 <code>Geek</code> 范；</br>据说录用率为 1%，面试完全按照 <code>Google</code> 的标准，只有 13 个软件工程师，能把这么个产品做出来着实令人赞叹；</br>非常有诚意的薪水 + 非常可观的原始期权 + 非常赞的工作氛围；</br>考虑到对 <code>Android</code> 开发的兴趣不确定性，最终没能加入，至今略有遗憾。</td>
<td></td>
</tr>
<tr>
<td> Google </td>
<td> 未投递简历 </td>
<td style="text-align:center;"> <code>Give up</code> </td>
</tr>
<tr>
<td></td>
<td>曾被 <code>Google</code> 的 <code>HR</code> 主动上门联系，有过一个小时的英语电话沟通；</br>考虑到口语相对薄弱，算法未达到理想中的状态，家庭因素等原因，暂时不考虑国外工作机会。</td>
<td></td>
</tr>
<tr>
<td> Facebook </td>
<td> 未投递简历 </td>
<td style="text-align:center;"> <code>Give up</code> </td>
</tr>
<tr>
<td> Hulu </td>
<td> 未投递简历 </td>
<td style="text-align:center;"> <code>Give up</code> </td>
</tr>
</tbody>
</table>


<h2>整体面试情况</h2>

<p>总共面试了 14 家公司，其中 13 家公司拿到 offer，其中不乏很多公司给出了最高档校招待遇，基本上算是对学习生涯努力的肯定。
这么做显然有点损人品，但除了 9~10 月份校招面试了 BAT、网易游戏、雅虎之外，其它公司从时间上都是在雅虎北研解散后面试的，
也是迫于无奈之举。</p>

<p><strong>面试难度（个人看法）</strong>：</p>

<ul>
<li>第一梯队：雅虎北研，宜信大数据，FreeWheel</li>
<li>第二梯队：微软北京，Linkedin，豌豆荚，技德科技</li>
<li>第三梯队：BAT 的核心部门，网易游戏，亚马逊</li>
</ul>


<p>第一梯队的划分是根据校招范围以及人数来大致推断的。比如宜信大数据，目前只在清华、北大、中科院做校招宣讲；
雅虎则是重点在 Top 10 高校招聘。校招人数上面，第一梯队的三家今年大概都在 30 人左右，薪水也是相当给力。</p>

<p>其实梯队之间的面试难度界限很难区分，但是第一梯队和第三梯队的难度差距就可以明显感受出来。
之所以雅虎难度要大于微软，是因为能拿到雅虎 offer 的同学基本上都能拿下微软，反之则未必成立。
网易游戏放在第三梯队，因为虽然公司薪水较为给力，但面试并没有传说中的那么难，并且动辄一年校招近千人，大家可以感受下。</p>

<p>这里重点说说 BAT 的核心部门，放在第三梯队稍微有点欠妥，但是就面试难度来说可能确实如此，即使是核心部门的员工水平方差也会较大。
因为国内公司用人就是这么实在，互联网行业人才流动日益剧烈的今天，能招到一个上岗后能立马出活的码农就不错了，特别是在社招的时候，
几乎很少有主管去关心这个候选人是否 talent，是否 potential。</p>

<h2>offer 选择：薪酬，职位，增值</h2>

<p><strong>1. 薪酬</strong></p>

<p>offer 选择不谈钱，那就是扯淡。从我一个求职者的角度以及身边同学的样本来看，想招到最优秀的那批人才而又不给相应的薪水就是耍流氓。
有兴趣的同学可以看看知乎上面 <code>2014 年放弃阿里巴巴 offer 的人是否格外多？如果是，为什么？</code> 的话题，讨论风向基本上是一边倒的。
优秀的人才一定要给出对应的薪水，这样才会对工作更加认同，进而对公司产生更大的价值，这是一个正向的促进过程。</p>

<p>另一方面，我也不建议应届同学<strong>过分看重</strong>薪水，月薪加/减几 K 这些都只是加/减分项，可以在自己的计算中占很大权重，但是切勿本末倒置。
你对目前的职位是否感兴趣、是不是未来想深耕的领域，在这个岗位上能否能实现未来 2 年职业生涯的快速增值等等，这些才是根基。
离开了根基在职业生涯的起点过分追求薪水，也不会走的太远。</p>

<p>举个例子，WorksApplication 等一些日本外包公司都会给应届生开出 30~40 万的起薪，看上去似乎很美妙，
但是你可否认真思考过这类外包公司所用到的技术是否与如今飞速变化的互联网绝缘？这类公司每年的涨薪幅度如何（相信 5% 已经算是非常高了）？
自己职业生涯是否存在天花板？以后跳槽是否受到业界公司认可？事实上，如果眼光长远点的话，BAT 随便选个部门，
工作 3 年薪水只会比这个数更高（具体数字大家可以搜索下 <code>2015 年互联网行业薪酬报告</code>），而且职业生涯规划起来也会游刃有余。</p>

<p><strong>2. 职位</strong></p>

<p>这里的职位，指的是入职之后的 team、业务、技术等。实际上，如果没有实习过、没有相应的人脉是很难了解到入职之后将要做什么的。</p>

<p>以我的经验来看，首先从部门来判断业务是不是核心业务，是否受到管理层的重视等，具体可参考我之前知乎的回答（判断方法）：
<a href="http://www.zhihu.com/question/27292971/answer/50436865">目前阿里巴巴哪个部门最值得加入？为什么？</a>
关于 team 方面，面试本身就是双向互动的过程，在 Q&amp;A 环节就一定要把握住机会多了解面试官平时的工作，以及他平时所涉及的业务场景。
退而求其次，如果面试感觉不错，可以问面试官索要联系方式等，私下可以多交流交流。也可以在 linkedin、微博等社交网站人肉一下，
从面试官的背景以及他在社交网站的关注内容来判断未来的队友是否靠谱等。</p>

<p>多扯几句，这个时候 BAT 注重应届生 experience 反而成了某些同学的优势，因为同时会有极大的概率能拿到和自身技能树相匹配的职位 offer，
把握好这个优势反而可以让你更快胜任职场角色，得到相比于同阶段同学更快升职加薪的机会。从这个角度出发，国内互联网公司的 offer
比重是要大于微软等一类外企的，核心业务基本不在国内，标准化的算法面试流程也很难让有经验的应届同学分到 match 的 team。</p>

<p><strong>3. 增值</strong></p>

<p>增值，指的就是<strong>核心竞争力</strong>。随着国内移动互联网创业潮的出现，码农自然也是供不应求，薪酬更是水涨船高。
但是有多少同学会真正反思，如果这波泡沫破灭了，工作不是那么好找了，自身的不可替代性体现在哪里？</p>

<p>我自身是经历过一次雅虎裁员经历的，在这之前有微策略裁员、诺基亚裁员、微软裁员等等。没错，都是外企！
像雅虎/微软这类金字招牌的公司，即使出去应该也会是不缺 offer 的，但是是否想过相比同期去 BAT 的同学，
自身的优势在哪？习惯了外企温水煮青蛙的工作节奏，能否有信心适应国内互联网残酷的丛林法则？</p>

<p>诺基亚裁员的时候，小米员工在微博上不无得意地调侃前来小米求职的诺基亚被裁员工；雅虎裁员的时候，
我面试的一些公司面试官会私下聊起，似乎雅虎出来的同学技术水平也没用想象的那么高；和某厂总监交流的时候，
他说最近有个 Google 上海工作 8 年的同学过来面试，好像除了前 2 年能在 Google 积累扎实的编码功底之外，
好像也没用其它过硬的技术。</p>

<p>这些例子无不让人感到心酸，相信选择这些顶尖跨国公司作为自己第一份工作的同学起点都是非常高的，甚至是有点看不上国内 BAT 的。
但是是否会像小米模式一样，被友商 <code>看不见，看不懂，看不起，来不及</code>？</p>

<p>这一次，似乎又是国内互联网公司略显优势。在阿里云实习的时候，组里的小伙伴的情况大家也可以参考下。一个是我的 mentor，
工作 3 年，即将 P7，技术实力非常过硬，主管靠谱，而且已经在往核心抓了；另一个鸣嵩大神，5 年 P8，偶像级别，
组里的出现技术难题，几乎第一个就是找他，想必目前已经经济自由。这就是国内互联网目前令人激动的地方，有基础、
有技术、敢拼搏，就会无处不存在机遇，这个优势在任何外企都是没有的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YoHub - 基于事件驱动的异步网络编程框架]]></title>
    <link href="http://kedebug.com/blog/yohub/"/>
    <updated>2015-05-15T20:35:59+08:00</updated>
    <id>http://kedebug.com/blog/yohub</id>
    <content type="html"><![CDATA[<p><code>YoHub</code> 是我个人开源的第三个项目，语言是 <code>C++</code>。主要灵感启发自 <code>kylin</code> (百度首席架构师林士鼎先生的 baidu in-house 作品，
用于百度内部异步网络编程）。流露出代码只是零零点点，只有 <a href="http://dirlt.com/kylin.html">dirlt</a> 的文章大概介绍了下。
但是基于事件驱动异步网络编程的思想，应该是当前高并发生产环境下解决问题的主要途径。</p>

<!--more-->


<p>引用林仕鼎先生的一句话：
“最关键的是思维的转变，由同步思维换成异步思维。而当你习惯了异步思维后，其实慢慢也会发现单机系统和多机系统并没有太大差别，
从而也将跨入分布式系统的阶段。”</p>

<p><code>YoHub</code> 正是引用了这样的一个异步思路，把那篇文章中的一些代码框架给串了起来。目前代码还在不断的完善中。
网络编程的一些主要组件借鉴了 <code>muduo</code> 的 <code>boost function/bind</code> 回调的方式，极大了避免了虚函数的使用，使代码结构更加清晰，
还有用智能指针管理长连接等等。代码是放在了 <a href="https://github.com/kedebug/yohub">GitHub</a> 上面，有兴趣的同学可以看看。</p>

<p>个人感觉有几个值得一说的点：</p>

<h2>网络线程和工作线程分离</h2>

<p>其实指的便是 <code>Multiple Reactors + Worker Pool</code> 工作方式，使得可以针对不同的业务场景，灵活调整网络线程和工作线程的个数，让程序更加灵活高效。</p>

<h2>非阻塞(<code>non-blocking</code>)到异步(<code>asynchronous</code>)</h2>

<p><code>Linux</code> 内核对异步的支持不是特别好，于是目前只能用工作线程来模拟这一异步的过程，这也就是上面所提到的异步思路。</p>

<h2>智能指针 <code>shared_ptr/weak_ptr</code></h2>

<p>网络编程中，一个非常值得注意的点是： <code>TCP Connection</code> 的生命周期管理。
比较经典的一个场景是：当我们的任务放到工作线程中，但是还没来得及执行连接便断开。这时候应该怎么处理？
kylin 采用的是引用计数来解决这一问题，在设计之初，我也想过用计数的方法，但是这样 <code>thread pool</code> 就不具备通用性，要用虚函数，
每个任务都要继承一个 <code>ctx-&gt;Ref()</code> 这样的方法，如果入线程池的只是简单的任务要怎么办？
所以我这里利用智能指针，这点是很大程度上受到 <code>muduo</code> 网络库的影响。<code>YoHub</code> 受益于此，在此也想提醒每个学 <code>C++</code> 的同学，不妨了解下智能指针，大有裨益。</p>
]]></content>
  </entry>
  
</feed>
